#!/usr/bin/python3

import RPi.GPIO as GPIO
import smbus2 as smbus
import time


class UltraSonic:
    def _init_(self):
        # GPIO Mode (BOARD / BCM)
        GPIO.setmode(GPIO.BCM)

        # set GPIO Pins
        self.GPIO_TRIGGER = 4
        self.GPIO_ECHO = 17

        # set GPIO direction (IN / OUT)
        GPIO.setup(self.GPIO_TRIGGER, GPIO.OUT)
        GPIO.setup(self.GPIO_ECHO, GPIO.IN)

    def distance(self):
        # set Trigger to HIGH
        GPIO.output(self.GPIO_TRIGGER, True)

        # set Trigger after 0.01ms to LOW
        time.sleep(0.00001)
        GPIO.output(self.GPIO_TRIGGER, False)

        starttime = time.time()
        stoptime = time.time()

        # save StartTime
        while GPIO.input(self.GPIO_ECHO) == 0:
            starttime = time.time()

        # save time of arrival
        while GPIO.input(self.GPIO_ECHO) == 1:
            stoptime = time.time()

        # time difference between start and arrival
        timeelapsed = stoptime - starttime
        # multiply with the sonic speed (34300 cm/s)
        # and divide by 2, because there and back
        distance = (timeelapsed * 34300) / 2 / 100

        return distance


class I2CLCD:
    def _init_(self):
        # Define some device parameters
        self.I2C_ADDR = 0x27     # I2C device address, if any error, change this address to 0x3f
        self.LCD_WIDTH = 16      # Maximum characters per line

        # Define some device constants
        self.LCD_CHR = 1     # Mode - Sending data
        self.LCD_CMD = 0     # Mode - Sending command

        self.LCD_LINE_1 = 0x80   # LCD RAM address for the 1st line
        self.LCD_LINE_2 = 0xC0   # LCD RAM address for the 2nd line
        self.LCD_LINE_3 = 0x94   # LCD RAM address for the 3rd line
        self.LCD_LINE_4 = 0xD4   # LCD RAM address for the 4th line

        self.LCD_BACKLIGHT = 0x08  # On

        self.ENABLE = 0b00000100     # Enable bit

        # Timing constants
        self.E_PULSE = 0.0005
        self.E_DELAY = 0.0005

        # Open I2C interface
        # bus = smbus.SMBus(0)  # Rev 1 Pi uses 0
        self.bus = smbus.SMBus(1)    # Rev 2 Pi uses 1

        self.lcd_init()

    def lcd_init(self):
        # Initialise display
        self.lcd_byte(0x33, self.LCD_CMD)     # 110011 Initialise
        self.lcd_byte(0x32, self.LCD_CMD)     # 110010 Initialise
        self.lcd_byte(0x06, self.LCD_CMD)     # 000110 Cursor move direction
        self.lcd_byte(0x0C, self.LCD_CMD)     # 001100 Display On,Cursor Off, Blink Off
        self.lcd_byte(0x28, self.LCD_CMD)     # 101000 Data length, number of lines, font size
        self.lcd_byte(0x01, self.LCD_CMD)     # 000001 Clear display
        time.sleep(self.E_DELAY)

    def lcd_byte(self, bits, mode):
        # Send byte to data pins
        # bits = the data
        # mode = 1 for data
        #        0 for command

        bits_high = mode | (bits & 0xF0) | self.LCD_BACKLIGHT
        bits_low = mode | ((bits << 4) & 0xF0) | self.LCD_BACKLIGHT

        # High bits
        self.bus.write_byte(self.I2C_ADDR, bits_high)
        self.lcd_toggle_enable(bits_high)

        # Low bits
        self.bus.write_byte(self.I2C_ADDR, bits_low)
        self.lcd_toggle_enable(bits_low)

    def lcd_toggle_enable(self, bits):
        # Toggle enable
        time.sleep(self.E_DELAY)
        self.bus.write_byte(self.I2C_ADDR, (bits | self.ENABLE))
        time.sleep(self.E_PULSE)
        self.bus.write_byte(self.I2C_ADDR, (bits & ~self.ENABLE))
        time.sleep(self.E_DELAY)

    def lcd_string(self, message, line):
        # Send string to display
        message = message.ljust(self.LCD_WIDTH, " ")

        self.lcd_byte(line, self.LCD_CMD)

        for i in range(self.LCD_WIDTH):
            self.lcd_byte(ord(message[i]), self.LCD_CHR)


if _name_ == '_main_':
    try:
        us = UltraSonic()
        lcd = I2CLCD()
        while True:
            dist = us.distance()
            print ("Measured Distance = %.1f [m]" % dist)
            lcd.lcd_string("Distance:", lcd.LCD_LINE_1)
            lcd.lcd_string(" " + str(format(dist, '.3f')) + "[m]", lcd.LCD_LINE_2)
            time.sleep(0.1)

    except KeyboardInterrupt:
        print("Measurement stopped by User")
        GPIO.cleanup()